import frappe
from frappe.contacts.doctype.address.address import get_address_display, get_default_address
from frappe import _

def on_update(doc, method):
	#Checks
	if not doc.hu_address_line1 or \
		not doc.hu_town or \
		not doc.hu_pincode:
		return

	existing_address_name = get_default_address("Customer", doc.name)

	address = None
	if existing_address_name:
		address = frappe.get_doc("Address", existing_address_name)
	else:
		address = frappe.new_doc("Address")
		address.append('links', {
			"link_doctype": "Customer",
			"link_name": doc.name
		})

	address.address_line1 = doc.hu_address_line1
	address.address_line2 = doc.hu_address_line2
	town = doc.hu_town
	address.city = town[:town.rindex('-')]
	address.pincode = doc.hu_pincode
	address.save()

def validate(doc, method):
	if not hasattr(doc, 'efe_codice_fiscale'):
		frappe.throw(_("Please install ERPNext Fattura Elettronica app before proceeding."))

	doc.efe_first_name = doc.hu_first_name
	doc.efe_last_name = doc.hu_last_name
	doc.efe_date_of_birth = doc.hu_date_of_birth
	doc.efe_place_of_birth = doc.hu_place_of_birth
	doc.gender = doc.hu_gender

	if doc.hu_date_of_birth and doc.hu_place_of_birth and doc.hu_gender in ["Male", "Female"]:
		codice_fiscale = generate_codice_fiscale(doc.hu_first_name, doc.hu_last_name, doc.hu_date_of_birth, doc.hu_gender, doc.hu_place_of_birth)

		if doc.customer_type == _("Individual"):
			doc.efe_codice_fiscale = codice_fiscale
			doc.tax_id = codice_fiscale
		# #Set the efe_codice_fiscale if empty.
		# if not doc.efe_codice_fiscale:
		#     doc.efe_codice_fiscale = codice_fiscale

		# # Notify the user if the generated CF does not equal the CF entered by her.
		# if doc.efe_codice_fiscale != codice_fiscale:
		# 	frappe.msgprint(_("CodiceFiscale is different from the autogenerated value. Please click on Generate to use the correct autogenerated value and save again."))

		# # Some customers may have PartitaIVA instead of CodiceFiscale.
		# # If tax_id is set to PartitaIVA, it should not get overwritten by CodiceFiscale.
		# if not doc.tax_id:
		#     doc.tax_id = codice_fiscale

#Generate CF. Repeated for ease of use for IDR operators.
def generate_codice_fiscale(first_name, last_name, date_of_birth, gender, place_of_birth):
	from codicefiscale import build

	gender = 'M' if gender == 'Male' else 'F'
	municipality = frappe.db.get_value("Territory", place_of_birth, "efe_cadastral_code")
	date_of_birth = frappe.utils.get_datetime(date_of_birth)

	return build(last_name, first_name, date_of_birth, gender, municipality)
